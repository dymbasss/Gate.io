upstream application {
    # Алгоритм работает следующим образом: высчитывает хэш у адреса клиента и адреса сервера, 
    # и использует этот результат как уникальный ключ при балансировке.
    # ip_hash;
    # Алгоритм Least Connection обеспечивает равномерное распределение нагрузки между экземплярами 
    # приложения, как раз основываясь на количестве соединений с сервером.
    least_conn;
    server 172.18.0.96:3501;
    server 172.18.0.97:3502;
}

server {
    listen 8080 ssl;
    listen 8081;
    proxy_connect_timeout 5;
    proxy_send_timeout 600;
    proxy_read_timeout 600;
    ssl_certificate /usr/src/cert.pem;
    ssl_certificate_key /usr/src/key.pem;
    ssl_session_cache shared:SSL:20m;
    ssl_session_timeout 10m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    access_log /usr/src/nginx/logs/nginx_load_balancer_gate_rest_api_access.log;
    error_log /usr/src/nginx/logs/nginx_load_balancer_gate_rest_api_error.log;
 
    location / {
        proxy_set_header X-Scheme http;
        proxy_set_header X-Forwarded-Proto http;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-PORT $remote_port;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 8 8k;
        proxy_pass http://application;
    }
}